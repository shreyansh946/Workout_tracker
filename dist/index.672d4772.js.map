{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\nclass Workout {\n    date = new Date();\n    id = (Date.now() + '').slice(-10);\n    clicks = 0;\n\n    constructor(coords, distance, duration) {\n        this.coords = coords;\n        this.distance = distance;\n        this.duration = duration;\n    }\n\n    _setDescription() {\n        const months = [\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n        ];\n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`;\n    }\n\n    click(){\n        this.clicks++;\n    }\n}\n\nclass Running extends Workout {\n    type = 'running';\n\n    constructor(coords, distance, duration, cadence) {\n        super(coords, distance, duration);\n        this.cadence = cadence;\n        this.calcPace();\n        this._setDescription();\n    }\n\n    calcPace() {\n        this.pace = this.duration / this.distance;\n        return this.pace;\n    }\n}\n\nclass Cycling extends Workout {\n    type = 'cycling';\n\n    constructor(coords, distance, duration, elevationGain) {\n        super(coords, distance, duration);\n        this.elevationGain = elevationGain;\n        this.calcSpeed();\n        this._setDescription();\n    }\n\n    calcSpeed() {\n        this.speed = this.distance / (this.duration / 60);\n        return this.speed;\n    }\n}\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n    #map;\n    #mapEvent;\n    #mapZoomLevel = 16;\n    #workouts = [];\n\n    constructor() {\n        this._getposition();\n        this._getLocalStorage();\n        form.addEventListener('submit', this._newWorkout.bind(this));\n        inputType.addEventListener('change', this._toggleElevationField);\n        containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n    }\n\n    _getposition() {\n        if (navigator.geolocation)\n            navigator.geolocation.getCurrentPosition(\n                this._loadMap.bind(this),\n                function () {\n                    alert('could not get your position');\n                });\n    }\n\n    _loadMap(position) {\n        const { latitude, longitude } = position.coords;\n        console.log(`https://www.google.com/maps/@${latitude},${longitude},13z?entry=ttu`);\n\n        const coords = [latitude, longitude];\n\n        this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n        L.tileLayer('https://tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n            attribution: 'Â© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this.#map);\n\n        this.#map.on('click', this._showForm.bind(this));\n\n        this.#workouts.forEach(work => {\n            this._renderWorkoutMarker(work);\n        });\n    }\n\n    _showForm(mapE) {\n        this.#mapEvent = mapE;\n        form.classList.remove('hidden');\n        inputDistance.focus();\n    }\n\n    _hideForm() {\n        inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = '';\n\n        form.style.display = 'none';\n        form.classList.add('hidden');\n        setTimeout(() => {\n            form.style.display = 'grid';\n        }, 1000);\n    }\n\n    _toggleElevationField() {\n        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n    }\n\n    _newWorkout(e) {\n        const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n        let workout;\n\n        e.preventDefault();\n\n        const type = inputType.value;\n        const distance = +inputDistance.value;\n        const duration = +inputDuration.value;\n\n        if (!Number.isFinite(distance) || !Number.isFinite(duration) || !allPositive(distance, duration)) {\n            return alert('Inputs have to be positive numbers!');\n        }\n\n        const { lat, lng } = this.#mapEvent.latlng;\n        const coords = [lat, lng];\n\n        if (type === 'running') {\n            const cadence = +inputCadence.value;\n            if (!Number.isFinite(cadence) || !allPositive(cadence)) {\n                return alert('Inputs have to be positive numbers!');\n            }\n            workout = new Running(coords, distance, duration, cadence);\n        }\n\n        if (type === 'cycling') {\n            const elevation = +inputElevation.value;\n            if (!Number.isFinite(elevation)) {\n                return alert('Inputs have to be positive numbers!');\n            }\n            workout = new Cycling(coords, distance, duration, elevation);\n        }\n\n        this.#workouts.push(workout);\n\n        this._renderWorkoutMarker(workout);\n        this._renderWorkout(workout);\n\n        this._hideForm();\n        this._setLocalStorage();\n    }\n\n    _renderWorkoutMarker(workout) {\n        const [lat, lng] = workout.coords;\n\n        L.marker([lat, lng]).addTo(this.#map)\n            .bindPopup(\n                L.popup({\n                    maxWidth: 250,\n                    minWidth: 100,\n                    autoClose: false,\n                    closeOnClick: false,\n                    className: `${workout.type}-popup`\n                })\n            )\n            .setPopupContent(`${workout.type === 'running' ? 'ðââï¸' : 'ð´ââï¸'} ${workout.description} `)\n            .openPopup();\n    }\n\n    _renderWorkout(workout) {\n        let html = `\n            <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n          <h2 class=\"workout__title\">${workout.description}</h2>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">${workout.type === 'running' ? 'ðââï¸' : 'ð´ââï¸'}</span>\n            <span class=\"workout__value\">${workout.distance}</span>\n            <span class=\"workout__unit\">km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">â±</span>\n            <span class=\"workout__value\">${workout.duration}</span>\n            <span class=\"workout__unit\">min</span>\n          </div>\n            `;\n\n        if (workout.type === 'running') {\n            html += `\n            <div class=\"workout__details\">\n            <span class=\"workout__icon\">â¡ï¸</span>\n            <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n            <span class=\"workout__unit\">min/km</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">ð¦¶ð¼</span>\n            <span class=\"workout__value\">${workout.cadence}</span>\n            <span class=\"workout__unit\">spm</span>\n          </div>`;\n        }\n\n        if (workout.type === 'cycling') {\n            html += `\n            <div class=\"workout__details\">\n            <span class=\"workout__icon\">â¡ï¸</span>\n            <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n            <span class=\"workout__unit\">km/h</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">â°</span>\n            <span class=\"workout__value\">${workout.elevationGain}</span>\n            <span class=\"workout__unit\">m</span>\n          </div>`;\n        }\n\n        html += `</li>`;\n\n        containerWorkouts.insertAdjacentHTML('beforeend', html);\n    }\n\n    _moveToPopup(e) {\n        const workoutEl = e.target.closest('.workout');\n        console.log(workoutEl);\n\n        if (!workoutEl) return;\n\n        const workout = this.#workouts.find(\n            work => work.id === workoutEl.dataset.id\n        );\n        console.log(workout);\n\n        this.#map.setView(workout.coords, this.#mapZoomLevel, {\n            animate: true,\n            pan: {\n                duration: 1,\n            },\n        });\n\n        workout.click();\n    }\n\n    _setLocalStorage() {\n        localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n    }\n\n    _getLocalStorage() {\n        const data = JSON.parse(localStorage.getItem('workouts'));\n        console.log(data);\n\n        if (!data) return;\n\n        this.#workouts = data.map(work => {\n            if (work.type === 'running') {\n                return new Running(work.coords, work.distance, work.duration, work.cadence);\n            } else if (work.type === 'cycling') {\n                return new Cycling(work.coords, work.distance, work.duration, work.elevationGain);\n            }\n        });\n\n        // Ensure the map is loaded before rendering the workouts\n        if (this.#map) {\n            this.#workouts.forEach(work => {\n                this._renderWorkout(work);\n                this._renderWorkoutMarker(work);\n            });\n        }\n    }\n\n    reset()\n    {\n        localStorage.removeItem('workout');\n        localStorage.reload();\n    }\n}\n\nconst app = new App();\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}